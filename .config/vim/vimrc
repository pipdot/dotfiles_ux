" vim : foldmethod=marker :
" AUTHOR: Vicente Adolfo Bolea Sanchez
" Dependencies:
"
" Quick Predefined leader Maps
" ============================
"
" [a] -> :A
" [s] -> :Git
" [d] -> :Gdiff
" [t] -> :tabnew
" [T] -> :tabdel

" Bundle {{{
set nocp


"move vim's stuff out of $HOME
"see: https://tlvince.com/vim-respect-xdg
" move vimrc to ~/.config/vim/vimrc and redirect vim to it at launch.
"move the swap files to a dedicated directory
"
" set MYVIMRC to this file if not defined
if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif
if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

let s:myconfigdir=$XDG_CONFIG_HOME.'/vim'

" runtime directory
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/after

" Vim8 built-in packages, apparently
set packpath+=$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME.'/vim'
call mkdir($XDG_DATA_HOME.'/vim/spell', 'p', 0700)

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)

if !has('nvim') " Neovim has its own location which already complies with XDG specification
  set viminfofile=$XDG_STATE_HOME/vim/viminfo
endif


" Legacy options for version before Vim 8
let b:legacy_file = s:myconfigdir.'/.vimrc.legacy'
if filereadable(b:legacy_file)
  execute "source" . b:legacy_file
endif

" }}}
" Essentials {{
" We drink from the defaults of vim
if filereadable($VIMRUNTIME . "/defaults.vim")
  source $VIMRUNTIME/defaults.vim
else
  set incsearch showcmd wildmenu
endif

" }}}
" Interface settings {{{
"## COLORSCHEME
"set term=screen-256color
set background=dark

"## BASE16
try
  let g:solarized_contrast = "high"
  colorscheme solarized
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
else
  hi Folded ctermbg=16
endif
catch
endtry

"Correct broken redraw
set ttyfast
set noerrorbells
set novisualbell
set lazyredraw

" Auto reload files
" see: https://unix.stackexchange.com/a/383044
" on buffer change, terminal focus,
" or when cursor stops moving for 4 sec
set autoread
au FocusGained,BufEnter * :checktime
au CursorHold, CursorHoldI * checktime

" More options
set hlsearch
set wildignore=*.o,*.class,*.pyc
set path+=**
set hidden  " Useful feature, to have multiples buffer open
set mouse=a
"set cursorline
match Error /{{{\|}}}/
set exrc
"Line number
set number

"Long wrapped line
set showbreak= 
"Set backup off since we are always using git :D
set noswapfile
set nobackup
set nowritebackup

"Indentation
set shiftwidth=2
set expandtab
set tabstop=2
set backspace=2
set foldmethod=marker
set cino=N-s

if v:version >= 800
  set breakindent
endif

" }}}
" filetype settings {{{

" for vim-devicons
" is the default in neovim
" INSTEAD OF SETTING IT HERE:
" declare LANG=foo_FOO.utf-8 env var somewhere to
" and vim should pick it up.
" set encoding = utf-8

autocmd FileType html setlocal sw=2 ts=2 noexpandtab autoindent
autocmd FileType Makefile setlocal sw=2 ts=2 noexpandtab
autocmd FileType java setlocal sw=4 ts=4 expandtab
autocmd FileType Python setlocal sw=2 ts=2 expandtab

autocmd FileType html,markdown,rst,txt,tex setlocal textwidth=80 colorcolumn=81 spell
autocmd BufEnter,BufNew *.log setlocal nowrap

augroup tabsPolicy
  autocmd!
  autocmd BufEnter,BufNew *.tsv setlocal noexpandtab tabstop=6 sw=6
  autocmd BufEnter,BufNew *.tsv,Makefile,*.make,*.html :let b:SuperTabDisabled=1
  autocmd BufEnter,BufNew *.tsv,Makefile,*.make,*.html :silent! iunmap <Tab>
augroup end

highlight BadWhitespace ctermbg=red guibg=darkred
autocmd BufRead,BufNewFile * match BadWhitespace /\s\+$/
" }}}
"Key-binding {{{
" ---------------------------------------------------------------------
let mapleader = " "

"use Bépo keys for navigation.
"see: https://stackoverflow.com/a/26397302
"see: https://vi.stackexchange.com/a/232
" set langnoremap
" set langmap=ch,tj,sk,rl

" TODO: remap everything hjkl to also use arrow keys.
" noremap  <Up>     <NOP>
" noremap  <Down>   <NOP>
" noremap  <Left>   <NOP>
" noremap  <Right>  <NOP>
nnoremap Q <Nop>

nnoremap <Leader>n :NERDTreeFocusToggle<CR>
nnoremap <silent> <F2> :NERDTreeToggle<CR>
nnoremap <silent> <F3> :TagbarToggle<CR>
try
call togglebg#map("<F7>")
catch
endtry

"Customized shortcuts
"nnoremap <silent><leader>a :A<CR>
"nnoremap <silent><leader>d :Gdiff<CR>
"nnoremap <silent><leader>T :tabclose<CR>
"nnoremap <silent><leader>t :tabnew<CR>

" Clear screen clears search highlighting.
" from: https://stackoverflow.com/q/4982710
nnoremap <Leader>c :nohl<CR><C-L>


"Great map which saves the file in sudo mode, something like `sudo !!`
cnoremap w!! w !sudo tee >/dev/null %

ab W w
ab Wq wq
ab wQ wq
ab WQ wq
ab Q q
ab WQA wqa
ab Wqa wqa

" Tabs
"nnoremap <silent> <F2> :tabprevious<Enter>
"nnoremap <silent> <F3> :tabnext<Enter>
"nnoremap <silent> <F4> :tabnew<Enter>
"nnoremap <silent> <ESC><C-S-h> :tabprevious<cr>
"nnoremap <silent> <ESC><C-S-l> :tabnext<cr>
nnoremap <silent> <M-h> :bprevious<cr>
nnoremap <silent> <M-l> :bnext<cr>
nnoremap <silent> <M-Left> :bprevious<cr>
nnoremap <silent> <M-Right> :bnext<cr>

" see:
" https://codeburst.io/common-way-of-resizing-windows-panes-in-vim-and-tmux-9b88def886c6 
" noremap <C-M-h> :resize -1<CR>
" noremap <C-M-j> :vertical:resize -1<CR>
" noremap <C-M-k> :vertical:resize +1<CR>
" noremap <C-M-l> :resize +1<CR>

" Tmux-vim navigator
let g:tmux_navigator_no_mappings = 1

" here: trying to map from environment variable set by tmux
" probably bad.
" execute "nnoremap <silent> <" . ${key_pane_go_left} . "> :TmuxNavigateLeft<cr>"
" execute "nnoremap <silent> <" . ${key_pane_go_down} . "> :TmuxNavigateDown<cr>"
" execute "nnoremap <silent> <" . ${key_pane_go_up} . "> :TmuxNavigateUp<cr>"
" execute "nnoremap <silent> <" . ${key_pane_go_right} . "> :TmuxNavigateRight<cr>"
" execute "nnoremap <silent> <" . ${key_pane_go_previous} . ">  :TmuxNavigatePrevious<cr>"
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <C-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <C-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

"For vim-easymotion
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" <Leader>s{char}{char} to move to {char}{char}
nmap <Leader>s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

"Vimux
"map <Leader>rq :call VimuxRunCommand("clear; rspec " . bufname("%"), 0)<CR>

" vim-doge
let g:doge_enable_mappings = 0
let g:doge_mapping ='<Leader>d'

" vim-windowswap
let g:windowswap_map_keys = 0 "prevent default bindings
nnoremap <silent> <leader>yw :call WindowSwap#MarkWindowSwap()<CR>
nnoremap <silent> <leader>pw :call WindowSwap#DoWindowSwap()<CR>
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>

" Swap windows in a specific direction
" from: https://github.com/wesQ3/vim-windowswap/issues/16
function! WindowSwapInDirection(dir)
    call WindowSwap#MarkWindowSwap()
    exec 'wincmd ' . a:dir
    call WindowSwap#DoWindowSwap()
endfunction
" TODO: use it when C-S is figured out. Change terminal emulator?
" noremap <silent> <C-S-h> :call WindowSwapInDirection('h')<cr>
" noremap <silent> <C-S-j> :call WindowSwapInDirection('j')<cr>
" noremap <silent> <C-S-k> :call WindowSwapInDirection('k')<cr>
" noremap <silent> <C-S-l> :call WindowSwapInDirection('l')<cr>

"}}}
"Plug-ins (vim-plug) {{
" --------------------------------------------------------------------
call plug#begin(s:myconfigdir.'/plugged')
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
"  Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree' | Plug 'PhilRunninger/nerdtree-visual-selection' | Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' }
Plug 'ryanoasis/vim-devicons' | Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
" Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
" Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() }  }

" Unmanaged plugin (manually installed and updated)
" Plug '~/my-prototype-plugin'
"
" BÉPO support
" Plug 'michamos/vim-bepo'
" wl-clipboard integration
Plug 'jasonccox/vim-wayland-clipboard'
" Vim stuff
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-abolish'
Plug 'preservim/vimux'
Plug 'preservim/tagbar'

Plug 'jistr/vim-nerdtree-tabs'
" Key-binding
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-unimpaired'
" Switching between two panes
Plug 'wesQ3/vim-windowswap'
" Delete buffer without deleting pane
Plug 'qpkorr/vim-bufkill'

" Utility for multiple languages
Plug 'liuchengxu/vista.vim'
Plug 'tpope/vim-commentary'
" Git
Plug 'tpope/vim-fugitive'
" Documentation
Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
" Language server, and highlighting
Plug 'dense-analysis/ale'
Plug 'sheerun/vim-polyglot'
" Completion
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --ts-completer --rust-completer' }

"""
" Python specifics
Plug 'Vimjas/vim-python-pep8-indent'
" Markdown
Plug 'gabrielelana/vim-markdown'


Plug 'mbbill/undotree'
Plug 'easymotion/vim-easymotion'
Plug 'vim-autoformat/vim-autoformat'
" Plug  'sainnhe/edge' Initialize plugin system

call plug#end()
"}}}
"Termdebug {{{
" ---------------------------------------------------------------------
let g:termdebug_wide=1
"}}}
"Status line (Powerline) {{{
" ---------------------------------------------------------------------

set laststatus=2 " Always display the statusline in all windows
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

if has('python3')
    try
      python3 from powerline.vim import setup as powerline_setup
      python3 powerline_setup()
      python3 del powerline_setup
    catch
    endtry
endi

"}}}
"YouCompleteMe {{{
" ---------------------------------------------------------------------
" Make Vim always render the sign column:
" set signcolumn=yes
" Mapping to close the completion menu (default <C-y>)
let g:ycm_key_list_stop_completion = ['<C-x>']

" Set filetypes where YCM will be turned on
let g:ycm_filetype_whitelist = { 'cpp':1, 'h':2, 'hpp':3, 'c':4, 'cxx':5 }

" Close preview window after completing the insertion
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

let g:ycm_confirm_extra_conf = 0
" Don't confirm python conf
let g:ycm_always_populate_location_list = 1
" Always populate diagnostics list
let g:ycm_enable_diagnostic_signs = 1
" Enable line highligting diagnostics
let g:ycm_open_loclist_on_ycm_diags = 1
" Open location list to view diagnostics

let g:ycm_max_num_candidates = 20
" Max number of completion suggestions
let g:ycm_max_num_identifier_candidates = 10
" Max number of identifier-based suggestions
let g:ycm_auto_trigger = 1
" Enable completion menu
let g:ycm_show_diagnostic_ui = 1
" Show diagnostic display features
let g:ycm_error_symbol = '>>'
" The error symbol in Vim gutter
let g:ycm_enable_diagnostic_signs = 1
" Display icons in Vim's gutter, error, warnings
let g:ycm_enable_diagnostic_highlighting = 1
" Highlight regions of diagnostic text
let g:ycm_echo_current_diagnostic = 1
" Echo line's diagnostic that cursor is on
"}}}
"ALE / YCM {{{
"
let g:ale_linters = {'python': 'all'}
let g:ale_fixers = {'python': ['isort', 'yapf', 'remove_trailing_lines', 'trim_whitespace']}
let g:ale_lsp_suggestions = 1
let g:ale_fix_on_save = 1
let g:ale_go_gofmt_options = '-s'
let g:ale_go_gometalinter_options = '— enable=gosimple — enable=staticcheck'
let g:ale_completion_enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] [%severity%] %code: %%s'
" do the completion elsewhere
let g:ale_completion_enabled = 0
"}}}
"vim-airline {{{
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='powerlineish'
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#branch#format = 2
let g:airline_skip_empty_sections = 1
let g:airline_section_y = 0
let g:airline#extensions#whitespace#enabled = 0

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tabs = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
"}}}
"NERDTree "{{{
" ---------------------------------------------------------------------
let g:NERDChristmasTree = 1
let g:NERDTreeHighlightCursorline = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeDirArrows = 0
" }}}
"
"bufkill "{{{
" ---------------------------------------------------------------------
" Turn off default <leader>bb, <leader>bd, etc. mappings (default: 1)
let g:BufKillCreateMappings = 1

" Override default <C-^> behavior for swapping between alternate buffers (default: 0)
let g:BufKillOverrideCtrlCaret = 1

" Modify the command prefix if it conflicts with other plugins
" The below changes BD to DD, BB to DB, etc. (default: 'B')
" let g:BufKillCommandPrefix = 'D'

" If the buffer you want to kill is in many windows, the following option
" governs what to do (default: 'confirm', options: 'confirm'/'kill'/'cancel')
let g:BufKillActionWhenBufferDisplayedInAnotherWindow = 'kill'
" }}}
"
"colourschemes (Edge) "{{{
" ---------------------------------------------------------------------
" let g:edge_style = 'aura'
" let g:edge_enable_italic = 0
" let g:edge_disable_italic_comment = 1
" if has('termguicolors')
    " set termguicolors
" endif
" set guifont=Hack\ 11
" set background=dark
" colorscheme edge
"}}}}
"SuperTab | utisnipts {{{
"let g:UltiSnipsExpandTrigger        = "<C-j>"
"let g:UltiSnipsJumpForwardTrigger   = "<C-k>"
"let g:UltiSnipsJumpBackwardTrigger  = "<C-M-k>"
"let g:SuperTabDefaultCompletionType = "<C-P>"
"}}}
" Signature {{{
let g:snips_author = $GIT_AUTHOR_NAME
" }}}
" Fugitive {{{
set diffopt+=vertical
" }}}
" CtrlP {{{
let g:ctrlp_by_filename = 1
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_extensions = ['tag', 'quickfix']
let g:ctrlp_mruf_relative = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 'ra'
" }}}
" Local Config {{{
if filereadable($myconfigdir . "/.vimrc.local")
  autocmd BufLeave .vimrc.local normal! mV
  source $HOME/.vimrc.local
endif
" }}}
