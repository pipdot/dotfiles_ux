# Logo key. Use Mod1 for Alt.
set $mod Mod4
# workspace mod
set $auxmod Mod1
# vim-like directional keys are defined in input
#
### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    # floating_modifier $mod normal
    floating_modifier $mod

    # Reload the configuration file
    bindsym $mod+Shift+g reload
    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec $exitmenu

    bindsym $mod+Tab exec $switchlayout
#
# Moving around:
#
    # Move your focus around
    bindsym --to-code $mod+left focus left
    bindsym --to-code $mod+down focus down
    bindsym --to-code $mod+up focus up
    bindsym --to-code $mod+right focus right
    # Or use  $mod+[up|down|left|right]
    bindsym --to-code $mod+$left focus left
    bindsym --to-code $mod+$down focus down
    bindsym --to-code $mod+$up focus up
    bindsym --to-code $mod+$right focus right

    # Move the focused window with the same, but add Shift
    bindsym --to-code $mod+Shift+$left move left
    bindsym --to-code $mod+Shift+$down move down
    bindsym --to-code $mod+Shift+$up move up
    bindsym --to-code $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym --to-code $mod+Shift+left move left
    bindsym --to-code $mod+Shift+down move down
    bindsym --to-code $mod+Shift+up move up
    bindsym --to-code $mod+Shift+right move right
#
# Workspaces:

    # Switch to workspace
    bindsym --to-code $mod+1 workspace number 1
    bindsym --to-code $mod+2 workspace number 2
    bindsym --to-code $mod+3 workspace number 3
    bindsym --to-code $mod+4 workspace number 4
    bindsym --to-code $mod+5 workspace number 5
    bindsym --to-code $mod+6 workspace number 6
    bindsym --to-code $mod+7 workspace number 7
    bindsym --to-code $mod+8 workspace number 8
    bindsym --to-code $mod+9 workspace number 9
    bindsym --to-code $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym --to-code $mod+Shift+1 move container to workspace number 1
    bindsym --to-code $mod+Shift+2 move container to workspace number 2
    bindsym --to-code $mod+Shift+3 move container to workspace number 3
    bindsym --to-code $mod+Shift+4 move container to workspace number 4
    bindsym --to-code $mod+Shift+5 move container to workspace number 5
    bindsym --to-code $mod+Shift+6 move container to workspace number 6
    bindsym --to-code $mod+Shift+7 move container to workspace number 7
    bindsym --to-code $mod+Shift+8 move container to workspace number 8
    bindsym --to-code $mod+Shift+9 move container to workspace number 9
    bindsym --to-code $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
    # Create workspaces if they don't exist while moving.
    # from: https://old.reddit.com/r/swaywm/comments/pe5ipl/workspace_next_or_new/hswr4bf/
    set $next_or_new swaymsg -r -t get_workspaces | jq -r --arg OUTPUT $(swaymsg -t get_outputs -r | jq -r '.[] | select(.focused == true) | .name') '(. | (max_by(.num) | .num)) as $max | [.[] | select(.output == $OUTPUT)] | (max_by(.num) | .num) as $maxOutput | (.[] | select(.focused == true) | .num) as $current | if $maxOutput > $current then "next_on_output" else $max + 1 end'
    set $previous_or_first swaymsg -r -t get_workspaces | jq -r --arg OUTPUT $(swaymsg -t get_outputs -r | jq -r '.[] | select(.focused == true) | .name') '(. | (max_by(.num) | .num)) as $max | [.[] | select(.output == $OUTPUT)] | (min_by(.num) | .num) as $minOutput | (.[] | select(.focused == true) | .num) as $current | if $minOutput < $current then "prev_on_output" else $current end'
    #
    bindsym --to-code $mod+$auxmod+$up exec swaymsg "workspace $($previous_or_first)"
    bindsym --to-code $mod+$auxmod+$down exec swaymsg "workspace $($next_or_new)"
    bindsym --to-code $mod+$auxmod+Shift+$up exec swaymsg "move container to workspace $($previous_or_first), workspace prev_on_output"
    bindsym --to-code $mod+$auxmod+Shift+$down exec swaymsg "move container to workspace $($next_or_new), workspace next_on_output"
    # arrow keys now
    bindsym --to-code $mod+$auxmod+up exec swaymsg "workspace $($previous_or_first)"
    bindsym --to-code $mod+$auxmod+down exec swaymsg "workspace $($next_or_new)"
    bindsym --to-code $mod+$auxmod+Shift+up exec swaymsg "move container to workspace $($previous_or_first), workspace prev_on_output"
    bindsym --to-code $mod+$auxmod+Shift+down exec swaymsg "move container to workspace $($next_or_new), workspace next_on_output"

#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym --to-code $left resize shrink width 10px
    bindsym --to-code $down resize grow height 10px
    bindsym --to-code $up resize shrink height 10px
    bindsym --to-code $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym left resize shrink width 10px
    bindsym down resize grow height 10px
    bindsym up resize shrink height 10px
    bindsym right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

# Opacity (if applicable)
# TODO: use something other than a mode for this.
# mode $opaquemode {
#     bindsym $mod+o mode "default"
# }
# bindsym $mod+o mode $opaquemode

