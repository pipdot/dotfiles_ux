
# tmux will its own $TERM to work, do not change!
# set -g default-terminal "screen"
# Tmux settings
set -g prefix C-a
unbind C-b

# Set reload key to r
# see: https://github.com/tmux/tmux/issues/2638
# see: https://github.com/tmux/tmux/wiki/Formats
# TODO: don't know why I need to convert from format to env var for it to work.
setenv -gF tmux_conf_file '#{current_file}'
bind r source-file -F '#{tmux_conf_file}'
set-option -g history-limit 20000

# Count sessions start at 1
set -g base-index 1
set -s escape-time 0

# Set the title bar
set -g set-titles on
set -g set-titles-string "#(whoami) :: #h :: #(ifconfig |grep inet |awk -F: '{ print $2 }' |awk '{ print $1 }' |head -n 1)"

# set pane colors - hilight the active pane
set-option -g pane-border-style fg=colour235 #base02
set-option -g pane-active-border-style fg=colour240 #base01

# colorize messages in the command line
set-option -g message-style bg=black,fg=brightred,bright

# ----------------------
# Key binding
# -----------------------
# Use vim bindings
setw -g mode-keys vi
# bind-key C-a last-window
# bind-key C-n next-window
# bind-key C-p previous-window
# bind-key C-c new-window

unbind-key '"'
unbind-key '%'
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"


# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# IMPORTANT: following bindings have to match with .vimrc!!
# IMPORTANT++: sourcing .tmux.conf after changing key-binding
#              will cause tmux to keep previous binding!!
#              run  :kill-session in that case.
# see: kill-server https://unix.stackexchange.com/q/373409
# TODO pip: resize panes integration with vim
# Regarding session variables
# Also see: https://unix.stackexchange.com/a/695869
# setenv -gh pane_navigate_key_left     'C-h'
# setenv -gh pane_navigate_key_down     'C-j'
# setenv -gh pane_navigate_key_up       'C-k'
# setenv -gh pane_navigate_key_right    'C-l'
# setenv -gh pane_navigate_key_previous 'C-\'
# setenv -gh pane_move_key_left   'C-M-h'
# setenv -gh pane_move_key_down   'C-M-j'
# setenv -gh pane_move_key_up     'C-M-k'
# setenv -gh pane_move_key_right  'C-M-l'
# setenv -gh is_vim "ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
pane_navigate_key_left='C-h'
pane_navigate_key_down='C-j'
pane_navigate_key_up='C-k'
pane_navigate_key_right='C-l'
pane_navigate_key_previous='C-\'
pane_move_key_left='C-S-h'
pane_move_key_down='C-S-j'
pane_move_key_up='C-S-k'
pane_move_key_right='C-S-l'
pane_move_step=1
#
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n "${pane_navigate_key_left}" {
  if-shell "$is_vim" {
    send-keys "${pane_navigate_key_left}"
  } {
    select-pane -L
  }
}
bind-key -n "${pane_navigate_key_down}" {
  if-shell "$is_vim" {
    send-keys "${pane_navigate_key_down}"
  } {
    select-pane -D
  }
}
bind-key -n "${pane_navigate_key_up}" {
  if-shell "$is_vim" {
    send-keys "${pane_navigate_key_up}"
  } {
    select-pane -U
  }
}
bind-key -n "${pane_navigate_key_right}" {
  if-shell "$is_vim" {
    send-keys "${pane_navigate_key_right}"
  } {
    select-pane -R
  }
}
bind-key -n "${pane_navigate_key_previous}" {
  if-shell "$is_vim" {
    send-keys "${pane_navigate_key_previous}"
  } {
    select-pane -l
  }
}
#
bind-key -n "${pane_move_key_left}" {
  if-shell "$is_vim" {
    send-keys "${pane_move_key_left}"
  } {
    swap-pane -d -s '{left-of}'
  }
}
bind-key -n "${pane_move_key_down}" {
  if-shell "$is_vim" {
    send-keys "${pane_move_key_down}"
  } {
    swap-pane -d -D
  }
}
bind-key -n "${pane_move_key_up}" {
  if-shell "$is_vim" {
    send-keys "${pane_move_key_up}"
  } {
    swap-pane -d -U
  }
}
bind-key -n "${pane_move_key_right}" {
  if-shell "$is_vim" {
    send-keys "${pane_move_key_right}"
  } {
    swap-pane -d -s '{right-of}'
  }
}

bind-key -T copy-mode-vi "${pane_navigate_key_left}"  select-pane -L
bind-key -T copy-mode-vi "${pane_navigate_key_left}"  select-pane -L
bind-key -T copy-mode-vi "${pane_navigate_key_left}"  select-pane -L
bind-key -T copy-mode-vi "${pane_navigate_key_down}"  select-pane -D
bind-key -T copy-mode-vi "${pane_navigate_key_up}"    select-pane -U
bind-key -T copy-mode-vi "${pane_navigate_key_right}" select-pane -R
bind-key -T copy-mode-vi "${pane_navigate_key_previous}" select-pane -l

#bind-key -T copy-mode-vi "${pane_move_key_left}"  resize-pane -L ${pane_move_step}
#bind-key -T copy-mode-vi "${pane_move_key_down}"  resize-pane -D ${pane_move_step}
#bind-key -T copy-mode-vi "${pane_move_key_up}"    resize-pane -U ${pane_move_step}
#bind-key -T copy-mode-vi "${pane_move_key_right}" resize-pane -R ${pane_move_step}
# swap panes left down up right
# see: https://superuser.com/a/1080434
bind-key -T copy-mode-vi "${pane_move_key_left}"  swap-pane -s '{left-of}'
bind-key -T copy-mode-vi "${pane_move_key_down}"  swap-pane -D
bind-key -T copy-mode-vi "${pane_move_key_up}"    swap-pane -U
bind-key -T copy-mode-vi "${pane_move_key_right}" swap-pane -s '{right-of}'


# Mouse integration (Version <= 2.0)
set -gq mouse-select-pane on
set -gq mouse-resize-pane on
set -gq mouse-select-window on
set-window-option -gq mode-mouse on

# Mouse integration (Version >= 2.1)
set -gq mouse on

# ----------------------
# Status Bar
# -----------------------
set-option -g status on                # turn the status bar on
set -gq status-utf8 on                  # set utf-8 for the status bar
set -g status-interval 5               # set update frequencey (default 15 seconds)
set -g status-justify centre           # center window list for clarity

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# set color for status bar
set-option -g status-style bg=colour235,fg=yellow,dim

# set window list colors - red for active and cyan for inactive
set-window-option -g window-status-style fg=brightblue,bg=colour236,dim
set-window-option -g window-status-current-style fg=brightred,bg=colour236,bright

set-option -g allow-rename off

# show host name and IP address on left side of status bar
set -g status-left-length 76
set -g status-left "#[fg=brightred]: #(whoami)#[fg=green] : #h : #[fg=yellow]#(ifconfig | grep inet | awk -F: '{ print $2 }' | awk '{ print $1 }' | head -n 1)"
set -g status-right "#[fg=blue] %d %b %Y : #[fg=green]%l:%M %p : #[fg=brightred]#(uptime | awk '{print $3,$4}' | tr -d , ) :"
# Powerline
if-shell '! [ -z "$POWERLINE_ROOT" ]' {
  if-shell 'env "$POWERLINE_CONFIG_COMMAND"' {
    run-shell 'powerline-daemon -q'
  }
  # sourcing directly with POWERLINE_ROOT env var
  source-file -F '#{POWERLINE_ROOT}/bindings/tmux/powerline.conf'
}

#---------------- Copy/Paste--------------------
bind-key Escape copy-mode # `tmux prefix + Escape` starts copy mode.
bind-key p paste-buffer # `prefix + p` pastes the latest buffer

# Mouse integration (Version >= 2.6)
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi Y send-keys -X copy-end-of-line
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T vi-copy Enter send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"

#------------------- TPM ---------------------------
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Initialize TMUX plugin manager
# (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'
