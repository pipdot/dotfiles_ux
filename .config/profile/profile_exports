#!/bin/sh

# Environment variables -----------------------------------------------
# set XDG
# see specification
# at: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
#
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.var/cache
export XDG_STATE_HOME=$HOME/.var/state
export XDG_RUNTIME_HOME=$HOME/.var/run

# tmux overwrites this value and won't work otherwise.
# So we instead use a non-standard TERMINAL value
# just so that we can know we are running tmux inside alacritty.
# This value is used in my own desktop entries .local/share/applications/*.
# It defaults to $TERM if we're not in alacritty
# see .config/alacritty/alacritty.yml
export TERMINAL=${TERMINAL:-$TERM}
terminal_name=$(echo $TERMINAL | cut -d'-' -f1)
# TODO
terminal_color_mode=$(echo $TERMINAL | cut -d'-' -s -f2)
# find the appropriate 'run programme in that terminal' command:
case $terminal_name in
 alacritty)
   terminal_run_command="$TERMINAL -e"
esac
export TERMINAL_RUN_COMMAND=${terminal_run_command:-$TERMINAL}
#
export EDITOR=vim
export HISTCONTROL=ignoreboth
# 16 KiL
export HISTSIZE=16384

# move vim's stuff out of $HOME
# see: https://tlvince.com/vim-respect-xdg
# and: https://blog.joren.ga/vim-xdg
# move vimrc to ~/.config/vim/vimrc and redirect vim to it at launch.
# export VIMINIT='let $MYVIMRC="${XDG_CONFIG_HOME:-$HOME/.config}/vim/vimrc" | source $MYVIMRC'
export VIMINIT="set nocp | source ${XDG_CONFIG_HOME:-$HOME/.config}/vim/vimrc"

# local binaries
export PATH="$HOME/.local/bin:$PATH"
# runit user services
export SVDIR="$HOME/.var/service"

# --------------------------------------------------------------------
# Font
export FONT_UI="Fira Code"

# -------------------------------------------------------------------
# Pyenv
# setup path if pyenv executable is found in expected location.
export PYENV_ROOT="$HOME/.local/pyenv"
if command -v $PYENV_ROOT/bin/pyenv 1>/dev/null 2>&1; then
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi
# Activate virtual env for stuff
# export DOTPYENV_ROOT="$HOME/.local/venv/dot"
# if [ -f "$DOTPYENV_ROOT/bin/activate" ]; then
# . "$DOTPYENV_ROOT/bin/activate"
# fi
# --------------------------------------------------------------------
# get powerline-status pip package install folder
# pip_root=$(pip show powerline-status | awk -F': ' '/Location: /{print $2}')
get_pip_package_location() {
  echo $(pip show $1 | grep -Po 'Location: \K.*')
}
# Prefer using powerline-status fork
# from: https://github.com/PH111P/powerline
# NOPE
powerline_package="powerline-status"
pip_root=$(get_pip_package_location $powerline_package)
if ! [ -z $pip_root ]; then
  export POWERLINE_ROOT="$pip_root/powerline"
fi

# --------------------------------------------------------------------
# NVM

# TODO: find it as we do with FZF.
nvm_dir="$HOME/.nvm"
if [ -s "$nvm_dir/nvm.sh" ]; then
  export NVM_DIR=$nvm_dir
  . "$NVM_DIR/nvm.sh"  # This loads nvm
fi

# --------------------------------------------------------------------
# rbenv

# TODO: find it
if command -v rbenv &> /dev/null; then
  eval "$(rbenv init - bash)"
fi

# --------------------------------------------------------------------
# FZF
# Setup fzf
find_fzf_root() {
  if command -v $1 &> /dev/null; then
    fzf_path=$(command -v $1)
    fzf_root=$(dirname "$fzf_path")
    echo $fzf_root
  fi
}
# look for fzf in different locations
fzf_root=$(find_fzf_root "fzf") # already in PATH, installed through distro
if [ -z $fzf_root ]; then
 # look for it in user's home, manually installed
  fzf_root=$(find_fzf_root ~/.fzf/bin/fzf)
  export FZF_SHELL_ROOT="$(dirname $fzf_root)/shell"
  export PATH="$fzf_root:$PATH"
else
  # handled by distribution, probably?
  fzf_root="/usr/share/fzf"
  if [ -d "$fzf_root" ]; then
    export FZF_SHELL_ROOT=$fzf_root
  fi
fi

FZF_DEFAULT_COMMAND='fd --type f'
FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border --inline-info'
# FZF_CTRL_T_COMMAND=
# FZF_CTRL_T_OPTS=
# FZF_CTRL_R_OPTS=
# FZF_ALT_C_COMMAND=
# FZF_ALT_C_OPTS=
FZF_TMUX_OPTS='-d 40%'


# --------------------------------------------------------------------
# Qt & Gnome
# export QT_QPA_PLATFORMTHEME='gnome'
export QT_STYLE_OVERRIDE='kvantum'

source_profile_file "gtk_settings"
# --------------------------------------------------------------------
# vim: ft=sh :
